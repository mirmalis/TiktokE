// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiktokE.Db;

namespace TiktokE.Db.Migrations
{
    [DbContext(typeof(TiktokEContext))]
    partial class TiktokEContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("TiktokE.Core.TT.Audio", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("TTID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasAlternateKey("Name", "TTID");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Channel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActiveHandleID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedsChecking")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Recorded")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TTID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Verified")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasAlternateKey("TTID");

                    b.HasIndex("ActiveHandleID");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Channel_Handle", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChannelID")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandleID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Recorded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Since")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("HandleID");

                    b.ToTable("Channel_Handle");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Handle", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Handles");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Video", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AudioID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChannelID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandleID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Recorded")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("TTID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasAlternateKey("TTID", "HandleID");

                    b.HasIndex("AudioID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("HandleID");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("TiktokE.Core.UploaderPreference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChannelID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasAlternateKey("UserID", "ChannelID");

                    b.HasIndex("ChannelID");

                    b.ToTable("UploaderPreferences");
                });

            modelBuilder.Entity("TiktokE.Core.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TiktokE.Core.UserVideoInteraction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VideoID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasAlternateKey("UserID", "VideoID");

                    b.HasIndex("VideoID");

                    b.ToTable("UserVideoInteractions");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Channel", b =>
                {
                    b.HasOne("TiktokE.Core.TT.Handle", "ActiveHandle")
                        .WithMany()
                        .HasForeignKey("ActiveHandleID");

                    b.Navigation("ActiveHandle");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Channel_Handle", b =>
                {
                    b.HasOne("TiktokE.Core.TT.Channel", "Channel")
                        .WithMany("Handles")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiktokE.Core.TT.Handle", "Handle")
                        .WithMany("ChannelAssignments")
                        .HasForeignKey("HandleID");

                    b.Navigation("Channel");

                    b.Navigation("Handle");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Video", b =>
                {
                    b.HasOne("TiktokE.Core.TT.Audio", "Audio")
                        .WithMany("Videos")
                        .HasForeignKey("AudioID");

                    b.HasOne("TiktokE.Core.TT.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelID");

                    b.HasOne("TiktokE.Core.TT.Handle", "Handle")
                        .WithMany("Videos")
                        .HasForeignKey("HandleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");

                    b.Navigation("Channel");

                    b.Navigation("Handle");
                });

            modelBuilder.Entity("TiktokE.Core.UploaderPreference", b =>
                {
                    b.HasOne("TiktokE.Core.TT.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiktokE.Core.User", "User")
                        .WithMany("ChannelPreferencess")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TiktokE.Core.UserVideoInteraction", b =>
                {
                    b.HasOne("TiktokE.Core.User", "User")
                        .WithMany("VideoInteractions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiktokE.Core.TT.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Audio", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Channel", b =>
                {
                    b.Navigation("Handles");
                });

            modelBuilder.Entity("TiktokE.Core.TT.Handle", b =>
                {
                    b.Navigation("ChannelAssignments");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("TiktokE.Core.User", b =>
                {
                    b.Navigation("ChannelPreferencess");

                    b.Navigation("VideoInteractions");
                });
#pragma warning restore 612, 618
        }
    }
}
